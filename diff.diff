diff --git a/client/src/api/config.js b/client/src/api/config.js
index 6467b83..b8a71fa 100644
--- a/client/src/api/config.js
+++ b/client/src/api/config.js
@@ -1,7 +1,7 @@
 const Configs = {
-     // url : 'http://localhost:4000' 
+     url : 'http://localhost:4000' 
      // url : 'http://10.0.0.110:4000',
-     url:'https://trkr-api.herokuapp.com'
+     // url:'https://trkr-api.herokuapp.com'
 }
 
 module.exports =  Configs; 
\ No newline at end of file
diff --git a/server/src/services/authService.js b/server/src/services/authService.js
index ba3a890..cae0cad 100644
--- a/server/src/services/authService.js
+++ b/server/src/services/authService.js
@@ -2,6 +2,7 @@ const User = require('../models/users')
 const bcrypt = require('bcrypt')
 const jwt = require('jsonwebtoken')
 const config = require('../config/config')
+const DatabaseService = require('./databaseService');
 require('dotenv').config()
 
 class JWTService {
@@ -19,14 +20,15 @@ class JWTService {
 }
 
 module.exports = class AuthService {
-    constructor() {}
+    constructor() {
+        this.databaseService = new DatabaseService();
+    }
 
     async loginUser(username,password, cb) {
         try {
             const { user , valid } = await this._isUserValid(username,password);
-            var payload = { username: username, userId: user._id }
             return (valid)
-                ? cb(null, { accessToken: new JWTService().generateAccessToken(payload), user: username, name: user.name, isAuth: true })
+                ? cb(null, { accessToken: new JWTService().generateAccessToken({ username: username, userId: user.id  }), user: username, name: user.name, isAuth: true })
                 : cb('Invalid Login', null);
         }catch(err){
             cb(err,null);
@@ -35,6 +37,8 @@ module.exports = class AuthService {
 
     async registerUser(payload, cb) {
         try {
+            var { username, password } = payload;
+
             var alreadyRegistered = await this._isUserRegistered(payload.username)
             if (alreadyRegistered) return cb('User Already Registered', null);
 
@@ -42,9 +46,8 @@ module.exports = class AuthService {
             payload.password = hashedPassword;
             payload.salt = salt;
 
-            var user = new User(payload)
-            let savedUser = await user.save()
-
+            // var user = new User(payload)
+            let savedUser = await this.databaseService.query('INSERT into Users(username, password, salt) VALUES (?,?,?);', [username, payload.password, payload.salt]);
             return cb(null, savedUser);
         } catch (err) {
             return cb(err, null);
@@ -52,9 +55,9 @@ module.exports = class AuthService {
     }
 
     async _isUserRegistered(username) {
-        var result = await User.findOne({ username: username })
+        var result = await this.databaseService.query('SELECT * FROM Users WHERE username = ?;', [username]);
 
-        if (result == null || Object.keys(result).length === 0) {
+        if (result == null || result.length === 0) {
             return false;
         }
         return true;
@@ -75,20 +78,20 @@ module.exports = class AuthService {
 
     async _isUserValid(username,attemptedPassword) {
         try {
-            var user = await User.findOne({ username: username })
-            if (user !== null) {
+            var user = await this.databaseService.query('SELECT * FROM Users WHERE username = ?', [username])
+            if (user.length !== 0) {
                 // validate the password
-                let matched = await bcrypt.compare(attemptedPassword, user.password)
+                let matched = await bcrypt.compare(attemptedPassword, user[0].password)
 
                 // return the the userid and the matched var
-                return { user : user, valid: matched };
+                return { user : user[0], valid: matched };
 
             }
             return { user: null, valid: false };
 
         }catch(err) {
             console.log(err)
-            return { user: null, valid:false };
+            return { user: null, valid: false };
         }
     }
 }
